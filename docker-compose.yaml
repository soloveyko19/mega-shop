services:
  postgres:
    image: postgres:16.4-alpine
    container_name: postgres
    # ports: # Only for testing. DO NOT USE it in production!
    #   - 5432:5432 
    env_file:
      - ./.env
    volumes:
      - ./postgres/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
      - ./postgres/postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "psql -U ${POSTGRES_USER} -d ${POSTGRES_DB_NAME} -c 'SELECT 1' || exit 1"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s  
    networks:
      - postgres_network

  redis:
    image: redis:7.4-alpine
    container_name: redis
    # ports: # Only for testing. DO NOT USE it in production!
    #   - 6379:6379
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
      - ./redis/redis_data:/data
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli ping || exit 1"]
      interval: 30s
      retries: 5
      timeout: 60s
      start_period: 30s
    networks:
      - redis_network

  backend:
    build: 
      dockerfile: Dockerfile
      context: ./backend
    container_name: backend
    # ports:
    #   - 5000:5000
    depends_on:
      - postgres
      - redis
    networks:
      - postgres_network
      - redis_network
      - backend
    env_file:
      - ./.env

  frontend:
    build: 
      dockerfile: Dockerfile
      context: ./frontend
      args:
        - NUXT_API_URL_CLIENT
    container_name: frontend
    depends_on:
      - backend
    # ports:
    #   - 3000:3000
    env_file:
      - ./.env
    networks:
      - backend
      - frontend
  
  nginx:
    image: nginx:1.27-alpine
    container_name: nginx
    depends_on: 
      - backend
      - frontend
    ports:
      - 80:80
      - 443:443
    networks:
      - frontend
      - backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/ssl


networks:
  postgres_network:
    driver: bridge
  redis_network:
    driver: bridge
  backend:
    driver: bridge
  frontend: 
    driver: bridge

    
    